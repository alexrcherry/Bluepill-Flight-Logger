
Bluepill Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080033b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080033b4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009847  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  0002987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173c7  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b79b  00000000  00000000  00043f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081444  00000000  00000000  0004f70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0b4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000257c  00000000  00000000  000d0ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003360 	.word	0x08003360

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003360 	.word	0x08003360

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <led>:

	temp_press[0] = TEMP;
	temp_press[1] = P;
}
//led
void led(uint8_t val){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if (val == 0){
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d106      	bne.n	80004ee <led+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	4807      	ldr	r0, [pc, #28]	; (8000504 <led+0x34>)
 80004e8:	f001 fb84 	bl	8001bf4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
	}
}
 80004ec:	e005      	b.n	80004fa <led+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <led+0x34>)
 80004f6:	f001 fb7d 	bl	8001bf4 <HAL_GPIO_WritePin>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40011000 	.word	0x40011000

08000508 <gyro_NCS>:
/*
 *
 * INITIALISATION
 *
 */
void gyro_NCS(uint8_t val){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	if (val == 0){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d105      	bne.n	8000524 <gyro_NCS+0x1c>
		HAL_GPIO_WritePin(GPIOA, GYR_NCS_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2110      	movs	r1, #16
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <gyro_NCS+0x30>)
 800051e:	f001 fb69 	bl	8001bf4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GYR_NCS_Pin, 1);
	}
}
 8000522:	e004      	b.n	800052e <gyro_NCS+0x26>
		HAL_GPIO_WritePin(GPIOA, GYR_NCS_Pin, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	2110      	movs	r1, #16
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <gyro_NCS+0x30>)
 800052a:	f001 fb63 	bl	8001bf4 <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010800 	.word	0x40010800

0800053c <accel_NCS>:

void accel_NCS(uint8_t val){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	if (val == 0){
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d105      	bne.n	8000558 <accel_NCS+0x1c>
		HAL_GPIO_WritePin(GPIOA, ACC_NCS_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2102      	movs	r1, #2
 8000550:	4806      	ldr	r0, [pc, #24]	; (800056c <accel_NCS+0x30>)
 8000552:	f001 fb4f 	bl	8001bf4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, ACC_NCS_Pin, 1);
	}
}
 8000556:	e004      	b.n	8000562 <accel_NCS+0x26>
		HAL_GPIO_WritePin(GPIOA, ACC_NCS_Pin, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	2102      	movs	r1, #2
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <accel_NCS+0x30>)
 800055e:	f001 fb49 	bl	8001bf4 <HAL_GPIO_WritePin>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40010800 	.word	0x40010800

08000570 <BMI088_Init>:

uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	601a      	str	r2, [r3, #0]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	accel_NCS(GPIO_PIN_RESET);
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ffd3 	bl	800053c <accel_NCS>
	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fe90 	bl	80012bc <HAL_Delay>
	accel_NCS(GPIO_PIN_SET);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ffcd 	bl	800053c <accel_NCS>
	HAL_Delay(50);
 80005a2:	2032      	movs	r0, #50	; 0x32
 80005a4:	f000 fe8a 	bl	80012bc <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 80005a8:	22b6      	movs	r2, #182	; 0xb6
 80005aa:	217e      	movs	r1, #126	; 0x7e
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f941 	bl	8000834 <BMI088_WriteAccRegister>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	4413      	add	r3, r2
 80005ba:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 fe7d 	bl	80012bc <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 80005c2:	f107 030e 	add.w	r3, r7, #14
 80005c6:	461a      	mov	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 f8cc 	bl	8000768 <BMI088_ReadAccRegister>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	4413      	add	r3, r2
 80005d8:	73fb      	strb	r3, [r7, #15]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f000 fe6e 	bl	80012bc <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 80005e0:	22a8      	movs	r2, #168	; 0xa8
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f925 	bl	8000834 <BMI088_WriteAccRegister>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	4413      	add	r3, r2
 80005f2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f000 fe61 	bl	80012bc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 80005fa:	2200      	movs	r2, #0
 80005fc:	2141      	movs	r1, #65	; 0x41
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f918 	bl	8000834 <BMI088_WriteAccRegister>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	4413      	add	r3, r2
 800060c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800060e:	200a      	movs	r0, #10
 8000610:	f000 fe54 	bl	80012bc <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000614:	220a      	movs	r2, #10
 8000616:	2153      	movs	r1, #83	; 0x53
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f90b 	bl	8000834 <BMI088_WriteAccRegister>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	4413      	add	r3, r2
 8000626:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fe47 	bl	80012bc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 800062e:	2204      	movs	r2, #4
 8000630:	2158      	movs	r1, #88	; 0x58
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f8fe 	bl	8000834 <BMI088_WriteAccRegister>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4413      	add	r3, r2
 8000640:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000642:	200a      	movs	r0, #10
 8000644:	f000 fe3a 	bl	80012bc <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000648:	2200      	movs	r2, #0
 800064a:	217c      	movs	r1, #124	; 0x7c
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f8f1 	bl	8000834 <BMI088_WriteAccRegister>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	4413      	add	r3, r2
 800065a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fe2d 	bl	80012bc <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000662:	2204      	movs	r2, #4
 8000664:	217d      	movs	r1, #125	; 0x7d
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f8e4 	bl	8000834 <BMI088_WriteAccRegister>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	4413      	add	r3, r2
 8000674:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fe20 	bl	80012bc <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a38      	ldr	r2, [pc, #224]	; (8000760 <BMI088_Init+0x1f0>)
 8000680:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2292      	movs	r2, #146	; 0x92
 8000686:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	gyro_NCS(GPIO_PIN_SET);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff3d 	bl	8000508 <gyro_NCS>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 800068e:	22b6      	movs	r2, #182	; 0xb6
 8000690:	2114      	movs	r1, #20
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f8fe 	bl	8000894 <BMI088_WriteGyrRegister>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4413      	add	r3, r2
 80006a0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(250);
 80006a2:	20fa      	movs	r0, #250	; 0xfa
 80006a4:	f000 fe0a 	bl	80012bc <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80006a8:	f107 030e 	add.w	r3, r7, #14
 80006ac:	461a      	mov	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f88d 	bl	80007d0 <BMI088_ReadGyrRegister>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4413      	add	r3, r2
 80006be:	73fb      	strb	r3, [r7, #15]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fdfb 	bl	80012bc <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80006c6:	2201      	movs	r2, #1
 80006c8:	210f      	movs	r1, #15
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f8e2 	bl	8000894 <BMI088_WriteGyrRegister>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	4413      	add	r3, r2
 80006d8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80006da:	200a      	movs	r0, #10
 80006dc:	f000 fdee 	bl	80012bc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 80006e0:	2207      	movs	r2, #7
 80006e2:	2110      	movs	r1, #16
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f8d5 	bl	8000894 <BMI088_WriteGyrRegister>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4413      	add	r3, r2
 80006f2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 fde1 	bl	80012bc <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	2115      	movs	r1, #21
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f8c8 	bl	8000894 <BMI088_WriteGyrRegister>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	4413      	add	r3, r2
 800070c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 fdd4 	bl	80012bc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8000714:	2201      	movs	r2, #1
 8000716:	2116      	movs	r1, #22
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f8bb 	bl	8000894 <BMI088_WriteGyrRegister>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	4413      	add	r3, r2
 8000726:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000728:	200a      	movs	r0, #10
 800072a:	f000 fdc7 	bl	80012bc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 800072e:	2201      	movs	r2, #1
 8000730:	2118      	movs	r1, #24
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8ae 	bl	8000894 <BMI088_WriteGyrRegister>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4413      	add	r3, r2
 8000740:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000742:	200a      	movs	r0, #10
 8000744:	f000 fdba 	bl	80012bc <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <BMI088_Init+0x1f4>)
 800074c:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2282      	movs	r2, #130	; 0x82
 8000752:	769a      	strb	r2, [r3, #26]

	return status;
 8000754:	7bfb      	ldrb	r3, [r7, #15]

}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	3a6b70a4 	.word	0x3a6b70a4
 8000764:	3a0ba058 	.word	0x3a0ba058

08000768 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af02      	add	r7, sp, #8
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	460b      	mov	r3, r1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800077c:	b2db      	uxtb	r3, r3
 800077e:	753b      	strb	r3, [r7, #20]
 8000780:	2300      	movs	r3, #0
 8000782:	757b      	strb	r3, [r7, #21]
 8000784:	2300      	movs	r3, #0
 8000786:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	accel_NCS(GPIO_PIN_RESET);
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fed7 	bl	800053c <accel_NCS>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f107 0210 	add.w	r2, r7, #16
 8000796:	f107 0114 	add.w	r1, r7, #20
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2303      	movs	r3, #3
 80007a2:	f002 f831 	bl	8002808 <HAL_SPI_TransmitReceive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bf0c      	ite	eq
 80007ac:	2301      	moveq	r3, #1
 80007ae:	2300      	movne	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	75fb      	strb	r3, [r7, #23]
	accel_NCS(GPIO_PIN_SET);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fec1 	bl	800053c <accel_NCS>

	if (status == 1) {
 80007ba:	7dfb      	ldrb	r3, [r7, #23]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d102      	bne.n	80007c6 <BMI088_ReadAccRegister+0x5e>

		*data = rxBuf[2];
 80007c0:	7cba      	ldrb	r2, [r7, #18]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]

}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	460b      	mov	r3, r1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	753b      	strb	r3, [r7, #20]
 80007e8:	2300      	movs	r3, #0
 80007ea:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	gyro_NCS(GPIO_PIN_RESET);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fe8b 	bl	8000508 <gyro_NCS>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f107 0210 	add.w	r2, r7, #16
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2302      	movs	r3, #2
 8000806:	f001 ffff 	bl	8002808 <HAL_SPI_TransmitReceive>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf0c      	ite	eq
 8000810:	2301      	moveq	r3, #1
 8000812:	2300      	movne	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	75fb      	strb	r3, [r7, #23]
	gyro_NCS(GPIO_PIN_SET);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff fe75 	bl	8000508 <gyro_NCS>

	if (status == 1) {
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d102      	bne.n	800082a <BMI088_ReadGyrRegister+0x5a>

		*data = rxBuf[1];
 8000824:	7c7a      	ldrb	r2, [r7, #17]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800082a:	7dfb      	ldrb	r3, [r7, #23]

}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
 8000840:	4613      	mov	r3, r2
 8000842:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	733b      	strb	r3, [r7, #12]
 8000848:	78bb      	ldrb	r3, [r7, #2]
 800084a:	737b      	strb	r3, [r7, #13]

	accel_NCS(GPIO_PIN_RESET);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fe75 	bl	800053c <accel_NCS>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	f107 010c 	add.w	r1, r7, #12
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	2202      	movs	r2, #2
 8000860:	f001 fe96 	bl	8002590 <HAL_SPI_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000872:	bf00      	nop
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fa8d 	bl	8002d98 <HAL_SPI_GetState>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d1f7      	bne.n	8000874 <BMI088_WriteAccRegister+0x40>
	accel_NCS(GPIO_PIN_SET);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fe59 	bl	800053c <accel_NCS>

	return status;
 800088a:	7bfb      	ldrb	r3, [r7, #15]

}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
 80008a0:	4613      	mov	r3, r2
 80008a2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	733b      	strb	r3, [r7, #12]
 80008a8:	78bb      	ldrb	r3, [r7, #2]
 80008aa:	737b      	strb	r3, [r7, #13]

	gyro_NCS(GPIO_PIN_RESET);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe2b 	bl	8000508 <gyro_NCS>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f107 010c 	add.w	r1, r7, #12
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	2202      	movs	r2, #2
 80008c0:	f001 fe66 	bl	8002590 <HAL_SPI_Transmit>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80008d2:	bf00      	nop
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fa5d 	bl	8002d98 <HAL_SPI_GetState>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d1f7      	bne.n	80008d4 <BMI088_WriteGyrRegister+0x40>
	gyro_NCS(GPIO_PIN_SET);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fe0f 	bl	8000508 <gyro_NCS>

	return status;
 80008ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	accel_NCS(GPIO_PIN_RESET);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fe1d 	bl	800053c <accel_NCS>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0112 	add.w	r1, r3, #18
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8000912:	2308      	movs	r3, #8
 8000914:	f002 f91a 	bl	8002b4c <HAL_SPI_TransmitReceive_DMA>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <BMI088_ReadAccelerometerDMA+0x34>

		imu->readingAcc = 1;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2201      	movs	r2, #1
 8000922:	741a      	strb	r2, [r3, #16]
		return 1;
 8000924:	2301      	movs	r3, #1
 8000926:	e003      	b.n	8000930 <BMI088_ReadAccelerometerDMA+0x3c>

	} else {

		accel_NCS(GPIO_PIN_SET);
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff fe07 	bl	800053c <accel_NCS>
		return 0;
 800092e:	2300      	movs	r3, #0

	}

}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

	accel_NCS(GPIO_PIN_SET);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fdfb 	bl	800053c <accel_NCS>
	imu->readingAcc = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000952:	b2db      	uxtb	r3, r3
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21a      	sxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800095e:	b2db      	uxtb	r3, r3
 8000960:	b21b      	sxth	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800096c:	b2db      	uxtb	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000978:	b2db      	uxtb	r3, r3
 800097a:	b21b      	sxth	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000986:	b2db      	uxtb	r3, r3
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	b21a      	sxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000992:	b2db      	uxtb	r3, r3
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800099e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd40 	bl	8000428 <__aeabi_i2f>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4619      	mov	r1, r3
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff fbcd 	bl	800014c <__aeabi_fmul>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80009be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fd30 	bl	8000428 <__aeabi_i2f>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	4620      	mov	r0, r4
 80009ce:	f7ff fbbd 	bl	800014c <__aeabi_fmul>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	63da      	str	r2, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80009de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd20 	bl	8000428 <__aeabi_i2f>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4619      	mov	r1, r3
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff fbad 	bl	800014c <__aeabi_fmul>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}

08000a02 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]

	gyro_NCS(GPIO_PIN_RESET);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fd7c 	bl	8000508 <gyro_NCS>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f103 011a 	add.w	r1, r3, #26
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8000a20:	2307      	movs	r3, #7
 8000a22:	f002 f893 	bl	8002b4c <HAL_SPI_TransmitReceive_DMA>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <BMI088_ReadGyroscopeDMA+0x34>

		imu->readingGyr = 1;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	745a      	strb	r2, [r3, #17]
		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e003      	b.n	8000a3e <BMI088_ReadGyroscopeDMA+0x3c>

	} else {

		gyro_NCS(GPIO_PIN_SET);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fd66 	bl	8000508 <gyro_NCS>
		return 0;
 8000a3c:	2300      	movs	r3, #0

	}

}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8000a46:	b590      	push	{r4, r7, lr}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]

	gyro_NCS(GPIO_PIN_SET);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fd5a 	bl	8000508 <gyro_NCS>
	imu->readingGyr = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	b21a      	sxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fcb9 	bl	8000428 <__aeabi_i2f>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fb46 	bl	800014c <__aeabi_fmul>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	645a      	str	r2, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000acc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fca9 	bl	8000428 <__aeabi_i2f>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4620      	mov	r0, r4
 8000adc:	f7ff fb36 	bl	800014c <__aeabi_fmul>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	649a      	str	r2, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000aec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fc99 	bl	8000428 <__aeabi_i2f>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff fb26 	bl	800014c <__aeabi_fmul>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}

08000b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_DMA_Init+0x48>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <MX_DMA_Init+0x48>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_DMA_Init+0x48>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200c      	movs	r0, #12
 8000b34:	f000 fcbd 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b38:	200c      	movs	r0, #12
 8000b3a:	f000 fcd6 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	200d      	movs	r0, #13
 8000b44:	f000 fcb5 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b48:	200d      	movs	r0, #13
 8000b4a:	f000 fcce 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a40      	ldr	r2, [pc, #256]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b3e      	ldr	r3, [pc, #248]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b88:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a3a      	ldr	r2, [pc, #232]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000b8e:	f043 0320 	orr.w	r3, r3, #32
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0320 	and.w	r3, r3, #32
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a34      	ldr	r2, [pc, #208]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a2e      	ldr	r2, [pc, #184]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <MX_GPIO_Init+0x120>)
 8000bd8:	f001 f80c 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACC_NCS_Pin|GYR_NCS_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2132      	movs	r1, #50	; 0x32
 8000be0:	4827      	ldr	r0, [pc, #156]	; (8000c80 <MX_GPIO_Init+0x124>)
 8000be2:	f001 f807 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481f      	ldr	r0, [pc, #124]	; (8000c7c <MX_GPIO_Init+0x120>)
 8000c00:	f000 fe7c 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA5 */
  GPIO_InitStruct.Pin = ACC_NCS_Pin|GYR_NCS_Pin|GPIO_PIN_5;
 8000c04:	2332      	movs	r3, #50	; 0x32
 8000c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <MX_GPIO_Init+0x124>)
 8000c1c:	f000 fe6e 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8000c20:	2304      	movs	r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_GPIO_Init+0x128>)
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4619      	mov	r1, r3
 8000c32:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_GPIO_Init+0x124>)
 8000c34:	f000 fe62 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT3_Pin;
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_GPIO_Init+0x128>)
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT3_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <MX_GPIO_Init+0x12c>)
 8000c4c:	f000 fe56 	bl	80018fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2008      	movs	r0, #8
 8000c56:	f000 fc2c 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c5a:	2008      	movs	r0, #8
 8000c5c:	f000 fc45 	bl	80014ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2017      	movs	r0, #23
 8000c66:	f000 fc24 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c6a:	2017      	movs	r0, #23
 8000c6c:	f000 fc3d 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40010800 	.word	0x40010800
 8000c84:	10110000 	.word	0x10110000
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	if (hspi->Instance == SPI1) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10d      	bne.n	8000cba <HAL_SPI_TxRxCpltCallback+0x2e>

		if (imu.readingAcc) {
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000ca0:	7c1b      	ldrb	r3, [r3, #16]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <HAL_SPI_TxRxCpltCallback+0x20>

			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000ca8:	f7ff fe46 	bl	8000938 <BMI088_ReadAccelerometerDMA_Complete>
		}

		if (imu.readingGyr) {
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000cae:	7c5b      	ldrb	r3, [r3, #17]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <HAL_SPI_TxRxCpltCallback+0x2e>

			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000cb6:	f7ff fec6 	bl	8000a46 <BMI088_ReadGyroscopeDMA_Complete>
		}
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	20000028 	.word	0x20000028

08000ccc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT1_Pin) {
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d103      	bne.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x18>

		BMI088_ReadAccelerometerDMA(&imu);
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cde:	f7ff fe09 	bl	80008f4 <BMI088_ReadAccelerometerDMA>

		BMI088_ReadGyroscopeDMA(&imu);

	}

}
 8000ce2:	e005      	b.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == INT3_Pin) {
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	2b80      	cmp	r3, #128	; 0x80
 8000ce8:	d102      	bne.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cec:	f7ff fe89 	bl	8000a02 <BMI088_ReadGyroscopeDMA>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000028 	.word	0x20000028

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d02:	f000 fa79 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d06:	f000 f81b 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0a:	f7ff ff27 	bl	8000b5c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d0e:	f000 f861 	bl	8000dd4 <MX_SPI1_Init>
  MX_DMA_Init();
 8000d12:	f7ff fefd 	bl	8000b10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 f9d3 	bl	80010c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BMI088_Init(&imu, &hspi1);
 8000d1a:	4907      	ldr	r1, [pc, #28]	; (8000d38 <main+0x3c>)
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <main+0x40>)
 8000d1e:	f7ff fc27 	bl	8000570 <BMI088_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	led(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fbd4 	bl	80004d0 <led>
	float reading = imu.acc_mps2[2];
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <main+0x40>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 8000d2e:	2064      	movs	r0, #100	; 0x64
 8000d30:	f000 fac4 	bl	80012bc <HAL_Delay>
  {
 8000d34:	e7f5      	b.n	8000d22 <main+0x26>
 8000d36:	bf00      	nop
 8000d38:	20000078 	.word	0x20000078
 8000d3c:	20000028 	.word	0x20000028

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b090      	sub	sp, #64	; 0x40
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	2228      	movs	r2, #40	; 0x28
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fafe 	bl	8003350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 ff63 	bl	8001c54 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d94:	f000 f819 	bl	8000dca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2102      	movs	r1, #2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f9d0 	bl	8002158 <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dbe:	f000 f804 	bl	8000dca <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3740      	adds	r7, #64	; 0x40
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dce:	b672      	cpsid	i
}
 8000dd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <Error_Handler+0x8>

08000dd4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <MX_SPI1_Init+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e20:	220a      	movs	r2, #10
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e26:	f001 fb2f 	bl	8002488 <HAL_SPI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e30:	f7ff ffcb 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	40013000 	.word	0x40013000

08000e40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a4a      	ldr	r2, [pc, #296]	; (8000f84 <HAL_SPI_MspInit+0x144>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	f040 808c 	bne.w	8000f7a <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e62:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_SPI_MspInit+0x148>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_SPI_MspInit+0x148>)
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_SPI_MspInit+0x148>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_SPI_MspInit+0x148>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <HAL_SPI_MspInit+0x148>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <HAL_SPI_MspInit+0x148>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e92:	2328      	movs	r3, #40	; 0x28
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4839      	ldr	r0, [pc, #228]	; (8000f8c <HAL_SPI_MspInit+0x14c>)
 8000ea6:	f000 fd29 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4833      	ldr	r0, [pc, #204]	; (8000f8c <HAL_SPI_MspInit+0x14c>)
 8000ebe:	f000 fd1d 	bl	80018fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ec2:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <HAL_SPI_MspInit+0x150>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <HAL_SPI_MspInit+0x150>)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000ee0:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_SPI_MspInit+0x158>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f10:	4820      	ldr	r0, [pc, #128]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000f12:	f000 fb05 	bl	8001520 <HAL_DMA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 8000f1c:	f7ff ff55 	bl	8000dca <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000f24:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_SPI_MspInit+0x154>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_SPI_MspInit+0x160>)
 8000f30:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f5e:	480f      	ldr	r0, [pc, #60]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f60:	f000 fade 	bl	8001520 <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 8000f6a:	f7ff ff2e 	bl	8000dca <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f72:	649a      	str	r2, [r3, #72]	; 0x48
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <HAL_SPI_MspInit+0x15c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40010000 	.word	0x40010000
 8000f94:	200000d0 	.word	0x200000d0
 8000f98:	4002001c 	.word	0x4002001c
 8000f9c:	20000114 	.word	0x20000114
 8000fa0:	40020030 	.word	0x40020030

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_MspInit+0x68>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_MspInit+0x68>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_MspInit+0x68>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_MspInit+0x68>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_MspInit+0x68>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_MspInit+0x68>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2101      	movs	r1, #1
 8000fde:	f06f 0003 	mvn.w	r0, #3
 8000fe2:	f000 fa66 	bl	80014b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x6c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_MspInit+0x6c>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f913 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8001066:	2004      	movs	r0, #4
 8001068:	f000 fddc 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA1_Channel2_IRQHandler+0x10>)
 8001076:	f000 fb0d 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000d0 	.word	0x200000d0

08001084 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Channel3_IRQHandler+0x10>)
 800108a:	f000 fb03 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000114 	.word	0x20000114

08001098 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT3_Pin);
 800109c:	2080      	movs	r0, #128	; 0x80
 800109e:	f000 fdc1 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <SystemInit+0x14>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART1_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010f8:	f002 f82a 	bl	8003150 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f7ff fe62 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000158 	.word	0x20000158
 8001110:	40013800 	.word	0x40013800

08001114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_UART_MspInit+0x8c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d131      	bne.n	8001198 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_UART_MspInit+0x90>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_UART_MspInit+0x90>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_UART_MspInit+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_UART_MspInit+0x90>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_UART_MspInit+0x90>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_UART_MspInit+0x90>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_UART_MspInit+0x94>)
 800117a:	f000 fbbf 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_UART_MspInit+0x94>)
 8001194:	f000 fbb2 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011d2:	f7ff ff69 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f002 f897 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fd8f 	bl	8000cfc <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011e8:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 80011ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011f0:	200001a0 	.word	0x200001a0

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f947 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fec6 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f95f 	bl	8001506 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f927 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000008 	.word	0x20000008
 80012a4:	2000019c 	.word	0x2000019c

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000019c 	.word	0x2000019c

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff90 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff2d 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff42 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff35 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e043      	b.n	80015be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_DMA_Init+0xa8>)
 800153e:	4413      	add	r3, r2
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_DMA_Init+0xac>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_DMA_Init+0xb0>)
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800156a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800156e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	bffdfff8 	.word	0xbffdfff8
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_DMA_Start_IT+0x20>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e04a      	b.n	800168a <HAL_DMA_Start_IT+0xb6>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001602:	2b01      	cmp	r3, #1
 8001604:	d13a      	bne.n	800167c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f938 	bl	80018a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 020e 	orr.w	r2, r2, #14
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e00f      	b.n	800166a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0204 	bic.w	r2, r2, #4
 8001658:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 020a 	orr.w	r2, r2, #10
 8001668:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e005      	b.n	8001688 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001684:	2302      	movs	r3, #2
 8001686:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001688:	7dfb      	ldrb	r3, [r7, #23]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	2204      	movs	r2, #4
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d04f      	beq.n	800175c <HAL_DMA_IRQHandler+0xc8>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d04a      	beq.n	800175c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0204 	bic.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a66      	ldr	r2, [pc, #408]	; (8001884 <HAL_DMA_IRQHandler+0x1f0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d029      	beq.n	8001742 <HAL_DMA_IRQHandler+0xae>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a65      	ldr	r2, [pc, #404]	; (8001888 <HAL_DMA_IRQHandler+0x1f4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d022      	beq.n	800173e <HAL_DMA_IRQHandler+0xaa>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_DMA_IRQHandler+0x1f8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01a      	beq.n	8001738 <HAL_DMA_IRQHandler+0xa4>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a62      	ldr	r2, [pc, #392]	; (8001890 <HAL_DMA_IRQHandler+0x1fc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d012      	beq.n	8001732 <HAL_DMA_IRQHandler+0x9e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a60      	ldr	r2, [pc, #384]	; (8001894 <HAL_DMA_IRQHandler+0x200>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00a      	beq.n	800172c <HAL_DMA_IRQHandler+0x98>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a5f      	ldr	r2, [pc, #380]	; (8001898 <HAL_DMA_IRQHandler+0x204>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d102      	bne.n	8001726 <HAL_DMA_IRQHandler+0x92>
 8001720:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001724:	e00e      	b.n	8001744 <HAL_DMA_IRQHandler+0xb0>
 8001726:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800172a:	e00b      	b.n	8001744 <HAL_DMA_IRQHandler+0xb0>
 800172c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001730:	e008      	b.n	8001744 <HAL_DMA_IRQHandler+0xb0>
 8001732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001736:	e005      	b.n	8001744 <HAL_DMA_IRQHandler+0xb0>
 8001738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173c:	e002      	b.n	8001744 <HAL_DMA_IRQHandler+0xb0>
 800173e:	2340      	movs	r3, #64	; 0x40
 8001740:	e000      	b.n	8001744 <HAL_DMA_IRQHandler+0xb0>
 8001742:	2304      	movs	r3, #4
 8001744:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_DMA_IRQHandler+0x208>)
 8001746:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8094 	beq.w	800187a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800175a:	e08e      	b.n	800187a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	2202      	movs	r2, #2
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d056      	beq.n	800181a <HAL_DMA_IRQHandler+0x186>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d051      	beq.n	800181a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 020a 	bic.w	r2, r2, #10
 8001792:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a38      	ldr	r2, [pc, #224]	; (8001884 <HAL_DMA_IRQHandler+0x1f0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d029      	beq.n	80017fa <HAL_DMA_IRQHandler+0x166>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a37      	ldr	r2, [pc, #220]	; (8001888 <HAL_DMA_IRQHandler+0x1f4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x162>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a35      	ldr	r2, [pc, #212]	; (800188c <HAL_DMA_IRQHandler+0x1f8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01a      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x15c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <HAL_DMA_IRQHandler+0x1fc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0x156>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a32      	ldr	r2, [pc, #200]	; (8001894 <HAL_DMA_IRQHandler+0x200>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00a      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x150>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a31      	ldr	r2, [pc, #196]	; (8001898 <HAL_DMA_IRQHandler+0x204>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <HAL_DMA_IRQHandler+0x14a>
 80017d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017dc:	e00e      	b.n	80017fc <HAL_DMA_IRQHandler+0x168>
 80017de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e2:	e00b      	b.n	80017fc <HAL_DMA_IRQHandler+0x168>
 80017e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e8:	e008      	b.n	80017fc <HAL_DMA_IRQHandler+0x168>
 80017ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ee:	e005      	b.n	80017fc <HAL_DMA_IRQHandler+0x168>
 80017f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f4:	e002      	b.n	80017fc <HAL_DMA_IRQHandler+0x168>
 80017f6:	2320      	movs	r3, #32
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x168>
 80017fa:	2302      	movs	r3, #2
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_DMA_IRQHandler+0x208>)
 80017fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d034      	beq.n	800187a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001818:	e02f      	b.n	800187a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2208      	movs	r2, #8
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d028      	beq.n	800187c <HAL_DMA_IRQHandler+0x1e8>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d023      	beq.n	800187c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020e 	bic.w	r2, r2, #14
 8001842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
    }
  }
  return;
 800187a:	bf00      	nop
 800187c:	bf00      	nop
}
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40020008 	.word	0x40020008
 8001888:	4002001c 	.word	0x4002001c
 800188c:	40020030 	.word	0x40020030
 8001890:	40020044 	.word	0x40020044
 8001894:	40020058 	.word	0x40020058
 8001898:	4002006c 	.word	0x4002006c
 800189c:	40020000 	.word	0x40020000

080018a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d108      	bne.n	80018e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018de:	e007      	b.n	80018f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	60da      	str	r2, [r3, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e161      	b.n	8001bd4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001910:	2201      	movs	r2, #1
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8150 	bne.w	8001bce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a97      	ldr	r2, [pc, #604]	; (8001b90 <HAL_GPIO_Init+0x294>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001938:	4a95      	ldr	r2, [pc, #596]	; (8001b90 <HAL_GPIO_Init+0x294>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d875      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800193e:	4a95      	ldr	r2, [pc, #596]	; (8001b94 <HAL_GPIO_Init+0x298>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001944:	4a93      	ldr	r2, [pc, #588]	; (8001b94 <HAL_GPIO_Init+0x298>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d86f      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800194a:	4a93      	ldr	r2, [pc, #588]	; (8001b98 <HAL_GPIO_Init+0x29c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001950:	4a91      	ldr	r2, [pc, #580]	; (8001b98 <HAL_GPIO_Init+0x29c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d869      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001956:	4a91      	ldr	r2, [pc, #580]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04c      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 800195c:	4a8f      	ldr	r2, [pc, #572]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d863      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001962:	4a8f      	ldr	r2, [pc, #572]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d046      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001968:	4a8d      	ldr	r2, [pc, #564]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d85d      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d82a      	bhi.n	80019c8 <HAL_GPIO_Init+0xcc>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d859      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <HAL_GPIO_Init+0x80>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019e3 	.word	0x080019e3
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a2b 	.word	0x08001a2b
 8001994:	08001a2b 	.word	0x08001a2b
 8001998:	08001a2b 	.word	0x08001a2b
 800199c:	08001a2b 	.word	0x08001a2b
 80019a0:	08001a2b 	.word	0x08001a2b
 80019a4:	08001a2b 	.word	0x08001a2b
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a2b 	.word	0x08001a2b
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a2b 	.word	0x08001a2b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019ed 	.word	0x080019ed
 80019c8:	4a76      	ldr	r2, [pc, #472]	; (8001ba4 <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e029      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e024      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01f      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e01a      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e013      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e009      	b.n	8001a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          break;
 8001a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d801      	bhi.n	8001a36 <HAL_GPIO_Init+0x13a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_Init+0x13e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d802      	bhi.n	8001a48 <HAL_GPIO_Init+0x14c>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x152>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	210f      	movs	r1, #15
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80a9 	beq.w	8001bce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <HAL_GPIO_Init+0x2b4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1dc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	; (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1d8>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	492b      	ldr	r1, [pc, #172]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4921      	ldr	r1, [pc, #132]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	491d      	ldr	r1, [pc, #116]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01f      	beq.n	8001bc0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	490d      	ldr	r1, [pc, #52]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e01f      	b.n	8001bce <HAL_GPIO_Init+0x2d2>
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f47f ae96 	bne.w	8001910 <HAL_GPIO_Init+0x14>
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	372c      	adds	r7, #44	; 0x2c
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f842 	bl	8000ccc <HAL_GPIO_EXTI_Callback>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e272      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8087 	beq.w	8001d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c74:	4b92      	ldr	r3, [pc, #584]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d00c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c80:	4b8f      	ldr	r3, [pc, #572]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d112      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x5e>
 8001c8c:	4b8c      	ldr	r3, [pc, #560]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d10b      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9a:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d06c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x12c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d168      	bne.n	8001d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e24c      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x76>
 8001cbc:	4b80      	ldr	r3, [pc, #512]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a7f      	ldr	r2, [pc, #508]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e02e      	b.n	8001d28 <HAL_RCC_OscConfig+0xd4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b7b      	ldr	r3, [pc, #492]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7a      	ldr	r2, [pc, #488]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b78      	ldr	r3, [pc, #480]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a77      	ldr	r2, [pc, #476]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e01d      	b.n	8001d28 <HAL_RCC_OscConfig+0xd4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0xbc>
 8001cf6:	4b72      	ldr	r3, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a71      	ldr	r2, [pc, #452]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0xd4>
 8001d10:	4b6b      	ldr	r3, [pc, #428]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a6a      	ldr	r2, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a67      	ldr	r2, [pc, #412]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff faba 	bl	80012a8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fab6 	bl	80012a8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e200      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0xe4>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff faa6 	bl	80012a8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff faa2 	bl	80012a8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1ec      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x10c>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d063      	beq.n	8001e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d11c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x18c>
 8001da6:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d116      	bne.n	8001de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_RCC_OscConfig+0x176>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1c0      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4939      	ldr	r1, [pc, #228]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	e03a      	b.n	8001e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fa5b 	bl	80012a8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff fa57 	bl	80012a8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e1a1      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4927      	ldr	r1, [pc, #156]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e015      	b.n	8001e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa3a 	bl	80012a8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e38:	f7ff fa36 	bl	80012a8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e180      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03a      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d019      	beq.n	8001e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa1a 	bl	80012a8 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fa16 	bl	80012a8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e160      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f000 fad8 	bl	800244c <RCC_Delay>
 8001e9c:	e01c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa00 	bl	80012a8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eaa:	e00f      	b.n	8001ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff f9fc 	bl	80012a8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d908      	bls.n	8001ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e146      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	42420000 	.word	0x42420000
 8001ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	4b92      	ldr	r3, [pc, #584]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e9      	bne.n	8001eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a6 	beq.w	8002032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b8b      	ldr	r3, [pc, #556]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10d      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a87      	ldr	r2, [pc, #540]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f12:	4b82      	ldr	r3, [pc, #520]	; (800211c <HAL_RCC_OscConfig+0x4c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x4c8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7e      	ldr	r2, [pc, #504]	; (800211c <HAL_RCC_OscConfig+0x4c8>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f9bd 	bl	80012a8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff f9b9 	bl	80012a8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	; 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e103      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b75      	ldr	r3, [pc, #468]	; (800211c <HAL_RCC_OscConfig+0x4c8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x312>
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a6e      	ldr	r2, [pc, #440]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e02d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x36e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x334>
 8001f6e:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a69      	ldr	r2, [pc, #420]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a66      	ldr	r2, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6213      	str	r3, [r2, #32]
 8001f86:	e01c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x36e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x356>
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a60      	ldr	r2, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a5d      	ldr	r2, [pc, #372]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x36e>
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a57      	ldr	r2, [pc, #348]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff f96d 	bl	80012a8 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff f969 	bl	80012a8 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0b1      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x37e>
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f957 	bl	80012a8 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f953 	bl	80012a8 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e09b      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ee      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8087 	beq.w	800214a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d061      	beq.n	800210c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d146      	bne.n	80020de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7ff f927 	bl	80012a8 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff f923 	bl	80012a8 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e06d      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d108      	bne.n	8002098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4921      	ldr	r1, [pc, #132]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a19      	ldr	r1, [r3, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	430b      	orrs	r3, r1
 80020aa:	491b      	ldr	r1, [pc, #108]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7ff f8f7 	bl	80012a8 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7ff f8f3 	bl	80012a8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e03d      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x46a>
 80020dc:	e035      	b.n	800214a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_RCC_OscConfig+0x4cc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff f8e0 	bl	80012a8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f8dc 	bl	80012a8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e026      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x498>
 800210a:	e01e      	b.n	800214a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e019      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x500>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d0      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4965      	ldr	r1, [pc, #404]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b8      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494d      	ldr	r1, [pc, #308]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d040      	beq.n	8002278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07f      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e073      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e06b      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4936      	ldr	r1, [pc, #216]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002248:	f7ff f82e 	bl	80012a8 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7ff f82a 	bl	80012a8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e053      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d210      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4922      	ldr	r1, [pc, #136]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e032      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4916      	ldr	r1, [pc, #88]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f821 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	5ccb      	ldrb	r3, [r1, r3]
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1cc>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe ff8c 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	08003388 	.word	0x08003388
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b490      	push	{r4, r7}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002334:	1d3c      	adds	r4, r7, #4
 8002336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800233c:	f240 2301 	movw	r3, #513	; 0x201
 8002340:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x40>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x46>
 800236a:	e02b      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800236e:	623b      	str	r3, [r7, #32]
      break;
 8002370:	e02b      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3328      	adds	r3, #40	; 0x28
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002382:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0c5b      	lsrs	r3, r3, #17
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	3328      	adds	r3, #40	; 0x28
 800239a:	443b      	add	r3, r7
 800239c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a6:	fb03 f202 	mul.w	r2, r3, r2
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	e004      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	623b      	str	r3, [r7, #32]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023c6:	623b      	str	r3, [r7, #32]
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc90      	pop	{r4, r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	08003378 	.word	0x08003378
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	003d0900 	.word	0x003d0900

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000000 	.word	0x20000000

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff2 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08003398 	.word	0x08003398

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffde 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	08003398 	.word	0x08003398

0800244c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <RCC_Delay+0x34>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <RCC_Delay+0x38>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0a5b      	lsrs	r3, r3, #9
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002468:	bf00      	nop
  }
  while (Delay --);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	60fa      	str	r2, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f9      	bne.n	8002468 <RCC_Delay+0x1c>
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000000 	.word	0x20000000
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e076      	b.n	8002588 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024aa:	d009      	beq.n	80024c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
 80024b2:	e005      	b.n	80024c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fcb0 	bl	8000e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	ea42 0103 	orr.w	r1, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	0c1a      	lsrs	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f002 0204 	and.w	r2, r2, #4
 8002566:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002576:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Transmit+0x22>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e126      	b.n	8002800 <HAL_SPI_Transmit+0x270>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ba:	f7fe fe75 	bl	80012a8 <HAL_GetTick>
 80025be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025d4:	e10b      	b.n	80027ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_Transmit+0x52>
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025e6:	e102      	b.n	80027ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2203      	movs	r2, #3
 80025ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262e:	d10f      	bne.n	8002650 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d007      	beq.n	800266e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002676:	d14b      	bne.n	8002710 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_SPI_Transmit+0xf6>
 8002680:	8afb      	ldrh	r3, [r7, #22]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d13e      	bne.n	8002704 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	1c9a      	adds	r2, r3, #2
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026aa:	e02b      	b.n	8002704 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d112      	bne.n	80026e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	1c9a      	adds	r2, r3, #2
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80026de:	e011      	b.n	8002704 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e0:	f7fe fde2 	bl	80012a8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d803      	bhi.n	80026f8 <HAL_SPI_Transmit+0x168>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d102      	bne.n	80026fe <HAL_SPI_Transmit+0x16e>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002702:	e074      	b.n	80027ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ce      	bne.n	80026ac <HAL_SPI_Transmit+0x11c>
 800270e:	e04c      	b.n	80027aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_SPI_Transmit+0x18e>
 8002718:	8afb      	ldrh	r3, [r7, #22]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d140      	bne.n	80027a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002744:	e02c      	b.n	80027a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d113      	bne.n	800277c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	86da      	strh	r2, [r3, #54]	; 0x36
 800277a:	e011      	b.n	80027a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277c:	f7fe fd94 	bl	80012a8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d803      	bhi.n	8002794 <HAL_SPI_Transmit+0x204>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x20a>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800279e:	e026      	b.n	80027ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1cd      	bne.n	8002746 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fcb0 	bl	8003114 <SPI_EndRxTxTransaction>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e000      	b.n	80027ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80027ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002816:	2301      	movs	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_SPI_TransmitReceive+0x26>
 800282a:	2302      	movs	r3, #2
 800282c:	e18a      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x33c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002836:	f7fe fd37 	bl	80012a8 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002854:	2b01      	cmp	r3, #1
 8002856:	d00f      	beq.n	8002878 <HAL_SPI_TransmitReceive+0x70>
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800285e:	d107      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x68>
 8002868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800286c:	2b04      	cmp	r3, #4
 800286e:	d003      	beq.n	8002878 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002876:	e15b      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_SPI_TransmitReceive+0x82>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_SPI_TransmitReceive+0x82>
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002890:	e14e      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2205      	movs	r2, #5
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	887a      	ldrh	r2, [r7, #2]
 80028ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d007      	beq.n	80028fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002902:	d178      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x10a>
 800290c:	8b7b      	ldrh	r3, [r7, #26]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d166      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	881a      	ldrh	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	1c9a      	adds	r2, r3, #2
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002936:	e053      	b.n	80029e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d11b      	bne.n	800297e <HAL_SPI_TransmitReceive+0x176>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d016      	beq.n	800297e <HAL_SPI_TransmitReceive+0x176>
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d113      	bne.n	800297e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	1c9a      	adds	r2, r3, #2
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d119      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x1b8>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d014      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029bc:	2301      	movs	r3, #1
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029c0:	f7fe fc72 	bl	80012a8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d807      	bhi.n	80029e0 <HAL_SPI_TransmitReceive+0x1d8>
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d003      	beq.n	80029e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029de:	e0a7      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1a6      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x130>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1a1      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x130>
 80029f4:	e07c      	b.n	8002af0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_SPI_TransmitReceive+0x1fc>
 80029fe:	8b7b      	ldrh	r3, [r7, #26]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d16b      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2a:	e057      	b.n	8002adc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d11c      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x26c>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x26c>
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d114      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d119      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x2ae>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d014      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ab6:	f7fe fbf7 	bl	80012a8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d803      	bhi.n	8002ace <HAL_SPI_TransmitReceive+0x2c6>
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d102      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x2cc>
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ada:	e029      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1a2      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x224>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d19d      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fb0d 	bl	8003114 <SPI_EndRxTxTransaction>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b0c:	e010      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	e000      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3730      	adds	r7, #48	; 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_SPI_TransmitReceive_DMA+0x20>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0e3      	b.n	8002d34 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002b82:	7dbb      	ldrb	r3, [r7, #22]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d00d      	beq.n	8002ba4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d106      	bne.n	8002b9e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HAL_SPI_TransmitReceive_DMA+0x52>
 8002b98:	7dbb      	ldrb	r3, [r7, #22]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ba2:	e0c2      	b.n	8002d2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bba:	e0b6      	b.n	8002d2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d003      	beq.n	8002bd0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2205      	movs	r2, #5
 8002bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	887a      	ldrh	r2, [r7, #2]
 8002bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d108      	bne.n	8002c24 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
 8002c22:	e007      	b.n	8002c34 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	2200      	movs	r2, #0
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	4619      	mov	r1, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002c5c:	f7fe fcba 	bl	80015d4 <HAL_DMA_Start_IT>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002c7e:	e054      	b.n	8002d2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c94:	2200      	movs	r2, #0
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	2200      	movs	r2, #0
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4619      	mov	r1, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002cc8:	f7fe fc84 	bl	80015d4 <HAL_DMA_Start_IT>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002cea:	e01e      	b.n	8002d2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d007      	beq.n	8002d0a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0220 	orr.w	r2, r2, #32
 8002d18:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0202 	orr.w	r2, r2, #2
 8002d28:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	08002ee7 	.word	0x08002ee7
 8002d40:	08002db3 	.word	0x08002db3
 8002d44:	08002f03 	.word	0x08002f03
 8002d48:	08002e59 	.word	0x08002e59
 8002d4c:	08002f1f 	.word	0x08002f1f

08002d50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da6:	b2db      	uxtb	r3, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dc0:	f7fe fa72 	bl	80012a8 <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d03b      	beq.n	8002e4c <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0220 	bic.w	r2, r2, #32
 8002de2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <SPI_DMAReceiveCplt+0x56>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df4:	d108      	bne.n	8002e08 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0203 	bic.w	r2, r2, #3
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e007      	b.n	8002e18 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	2164      	movs	r1, #100	; 0x64
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f927 	bl	8003070 <SPI_EndRxTransaction>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff9e 	bl	8002d86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002e4a:	e002      	b.n	8002e52 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ff7f 	bl	8002d50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e66:	f7fe fa1f 	bl	80012a8 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d02f      	beq.n	8002eda <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0220 	bic.w	r2, r2, #32
 8002e88:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	2164      	movs	r1, #100	; 0x64
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f940 	bl	8003114 <SPI_EndRxTxTransaction>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0203 	bic.w	r2, r2, #3
 8002eb4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff ff57 	bl	8002d86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ed8:	e002      	b.n	8002ee0 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7fd fed6 	bl	8000c8c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff ff34 	bl	8002d62 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff ff2f 	bl	8002d74 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0203 	bic.w	r2, r2, #3
 8002f3a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f043 0210 	orr.w	r2, r3, #16
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff ff18 	bl	8002d86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f70:	f7fe f99a 	bl	80012a8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f80:	f7fe f992 	bl	80012a8 <HAL_GetTick>
 8002f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	015b      	lsls	r3, r3, #5
 8002f8c:	0d1b      	lsrs	r3, r3, #20
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f96:	e054      	b.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d050      	beq.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fa0:	f7fe f982 	bl	80012a8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d902      	bls.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13d      	bne.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fce:	d111      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd8:	d004      	beq.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d107      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d10f      	bne.n	800301e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800301c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e017      	b.n	8003062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3b01      	subs	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d19b      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000000 	.word	0x20000000

08003070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003084:	d111      	bne.n	80030aa <SPI_EndRxTransaction+0x3a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308e:	d004      	beq.n	800309a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d107      	bne.n	80030aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b2:	d117      	bne.n	80030e4 <SPI_EndRxTransaction+0x74>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030bc:	d112      	bne.n	80030e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2101      	movs	r1, #1
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff ff49 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01a      	beq.n	800310a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e013      	b.n	800310c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ff36 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f043 0220 	orr.w	r2, r3, #32
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e000      	b.n	800310c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff18 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e000      	b.n	8003148 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e03f      	b.n	80031e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd ffcc 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f829 	bl	80031ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003226:	f023 030c 	bic.w	r3, r3, #12
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	430b      	orrs	r3, r1
 8003232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2c      	ldr	r2, [pc, #176]	; (8003300 <UART_SetConfig+0x114>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7ff f8e6 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	e002      	b.n	8003262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7ff f8ce 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8003260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009a      	lsls	r2, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	0119      	lsls	r1, r3, #4
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <UART_SetConfig+0x118>)
 800329a:	fba3 0302 	umull	r0, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2064      	movs	r0, #100	; 0x64
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b8:	4419      	add	r1, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	009a      	lsls	r2, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <UART_SetConfig+0x118>)
 80032d2:	fba3 0302 	umull	r0, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2064      	movs	r0, #100	; 0x64
 80032da:	fb00 f303 	mul.w	r3, r0, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	4a07      	ldr	r2, [pc, #28]	; (8003304 <UART_SetConfig+0x118>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	440a      	add	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40013800 	.word	0x40013800
 8003304:	51eb851f 	.word	0x51eb851f

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	2600      	movs	r6, #0
 800330c:	4d0c      	ldr	r5, [pc, #48]	; (8003340 <__libc_init_array+0x38>)
 800330e:	4c0d      	ldr	r4, [pc, #52]	; (8003344 <__libc_init_array+0x3c>)
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	f000 f822 	bl	8003360 <_init>
 800331c:	2600      	movs	r6, #0
 800331e:	4d0a      	ldr	r5, [pc, #40]	; (8003348 <__libc_init_array+0x40>)
 8003320:	4c0a      	ldr	r4, [pc, #40]	; (800334c <__libc_init_array+0x44>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	080033a0 	.word	0x080033a0
 8003344:	080033a0 	.word	0x080033a0
 8003348:	080033a0 	.word	0x080033a0
 800334c:	080033a4 	.word	0x080033a4

08003350 <memset>:
 8003350:	4603      	mov	r3, r0
 8003352:	4402      	add	r2, r0
 8003354:	4293      	cmp	r3, r2
 8003356:	d100      	bne.n	800335a <memset+0xa>
 8003358:	4770      	bx	lr
 800335a:	f803 1b01 	strb.w	r1, [r3], #1
 800335e:	e7f9      	b.n	8003354 <memset+0x4>

08003360 <_init>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr

0800336c <_fini>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr
